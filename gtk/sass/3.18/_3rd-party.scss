// /***********************
//  * Lightdm-Gtk-Greeter *
//  ***********************/

.lightdm-gtk-greeter {
  // top-panel styling
  #panel_window {
    background-image: linear-gradient(to bottom, $panel_bg_color);
    color: $inverted_fg_color;
    box-shadow: none;
    font-weight: 700;
    text-shadow: none;

    &, &.background,
    > * > * { background-color: transparent; } // FIXME: ugly wildcard

    .menubar {
      @extend .gnome-panel-menu-bar;
      background-color: transparent;
      color: $inverted_fg_color;

      .label,
      GtkImage {
        padding: 0 0.5em;
        color: $inverted_fg_color;
      }

      &:hover {
        color: $selected_fg_color;
        box-shadow: inset 0 2px $selected_bg_color;

        .label,
        GtkImage { color: $selected_fg_color; }
      }

      // flip underline-indicator vertically
      > .menuitem {
        padding: 0.4em 0;
        background-color: transparent;
        &:hover { box-shadow: inset 0 2px $selected_bg_color; }
      }

      .menu {
        .menuitem {
          padding: 0.4em 0.6em 0.5em;
          font-weight: 400;
          text-shadow: none;

          // override above hacks
          &, .label { color: $secondary_fg_color; }
          &:hover,
          &:hover .label { color: $fg_color; }
          &:insensitive,
          &:insensitive .label { color: $insensitive_fg_color; }
        }
      }
    }
  }

  // main container
  #login_window,
  #shutdown_dialog,
  #restart_dialog {
    @extend .message-dialog;
    border: 1px solid $borders_color;
    border-radius: 2px;
    box-shadow: none;

    .button {
      padding: 0.7em 1em 0.8em;
      color: $inverted_secondary_fg_color;
      &:hover,
      &:active { color: $inverted_fg_color; }
      &:insensitive { color: $insensitive_inverted_fg_color; }

      &#login_button { @extend .button.suggested-action; }

      &#restart_button,
      &#shutdown_button { @extend .button.destructive-action; }
    }

    GtkComboBox .button {
      padding: 0.9em 8px 1em;
      border-image: -gtk-gradient(radial,
                                  center bottom, 0,
                                  center bottom, 0.5,
                                  to($outline_track_color),
                                  to(transparent))
                                  0 0 1 / 0 0 1px;
      color: $inverted_fg_color;
      font-weight: 500;
      &:hover,
      &:active {
        border-image: -gtk-gradient(radial,
                                    center bottom, 0,
                                    center bottom, 0.5,
                                    to($selected_bg_color),
                                    to(transparent))
                                    0 0 2 / 0 0 2px;
        color: $selected_fg_color;
      }
      &:insensitive,
      &:checked:insensitive {
        border-image: -gtk-gradient(radial,
                                    center bottom, 0,
                                    center bottom, 0.5,
                                    to($outline_track_color),
                                    to(transparent))
                                    0 0 1 / 0 0 1px;
        color: $insensitive_inverted_fg_color;
      }
    }

    .entry { // prevent junmping when showing CapsLock warning
      padding: 0.9em 8px 1em;
      font-family: monospace;
    }

    GtkInfoBar.error { // notification revealer
      margin: 0 4px; // prevent unwanted overflow
      border: none;
      background-color: transparent;
      color: $error_color;
      font-weight: 700;
      font-size: 110%;
      transition: none; // transition causes visual glitches
    }
  }

  #login_window {
  }

  #content_frame { padding-bottom: 14px; }

  #buttonbox_frame {
    padding-top: 8px; // reserve gap between infobar and buttonbox
  }

  // non-CSD context menus
  GtkWindow.background.popup > .menu {
    margin: unset;
    padding: 1px;
    border-radius: 0;
    border-width: 1px;
    border-style: solid;
    border-color: $menu_highlight_color
                  $solid_light_borders_color
                  $solid_light_borders_color;
    background-clip: border-box;
  }
}


// /************
//  * Corebird *
//  ************/

// use normal foreground colour
GtkStack .button.profile-button {
  &:checked { color: $fg_color; }
}

// account menu button
.titlebar.header-bar GtkBox {
  .button.account-button { // left-most account-button
    // revert to square button since we can't make perfect circle button
    border-radius: 2px;
    outline-radius: 2px;

    // FIXME: it doesn't work
    .avatar-round { border-color: transparent; }
  }
}

// use asymmetrical separators
.list > .list-row.activatable.tweet {
  &:dir(ltr) {
    border-image: linear-gradient(to right,
                                  transparent 72px,
                                  $borders_color 72px,
                                  $borders_color)
                                  0 0 1 / 0 0 1px;
  }
  &:dir(rtl) {
    border-image: linear-gradient(to left,
                                  transparent 72px,
                                  $borders_color 72px,
                                  $borders_color)
                                  0 0 1 / 0 0 1px;
  }
}


// /********
//  * Nemo *
//  ********/

.nemo-desktop.nemo-canvas-item {
  @extend .nautilus-desktop.nautilus-canvas-item;
}

.nemo {
  &-canvas-item { @extend .nautilus-canvas-item; }

  &-list-dim-label { @extend .nautilus-list-dim-label; }
}

NemoWindow {
  // workaround for invisible text in rename entry
  EelEditableLabel.entry {
    &, &:focus { transition: none; }
  }

  // draw bottom border of toolbar
  .toolbar.primary-toolbar {
    border-bottom: 1px solid $borders_color;

    .button.image-button { // damned 'reload' button
      GtkAlignment > GtkBox > GtkImage { padding: 0 0.3em; }
    }

    .button.toggle,
    .linked > .button {
      padding: 0 1.2em 0.1em;

      &.image-button {
        border-radius: 100px;
        outline-radius: 100px;

        GtkImage { padding: 0 0.1em; }
      }
    }
  }

  // tweak path-bar buttons
  .primary-toolbar NemoPathBar.linked.raised {
    > .button { // ugly arrow button at most-left
      padding: 0;
      border-radius: 2px;
      outline-radius: 2px;

      GtkArrow { -GtkArrow-arrow-scaling: 0.5; }

      &, GtkArrow {
        color: $secondary_fg_color;
        &:hover,
        &:active,
        &:checked {
          color: $fg_color;
          &:insensitive { color: $insensitive_fg_color; }
        }
        &:insensitive { color: $insensitive_secondary_fg_color; }
      }
    }

    // revive horizontal padding
    .button.text-button,
    .button.image-button { padding: 0.3em 0.7em 0.4em; }
  }

  // tweak notebook colour
  .notebook { background-color: $base_color; }

  // tweak sidebar
  .sidebar {
    .frame { border-width: 0; } // remove double-border

    GtkDrawingArea { background-color: transparent; }
  }

  // force using flat-style on bottom bar
  GtkGrid > GtkEventBox {
    padding: 0.2em;
    background-color: $secondary_dark_color;
    box-shadow: if($variant == 'light', $inline-shadow-light,
                                        $inline-shadow-dark);

    > .toolbar {
      border-style: none;
      background-color: transparent;
      box-shadow: none;
    }

    > .toolbar .button.image-button {
      @extend %button_flat_normal;
      border-radius: 2px;
      outline-radius: 2px;
      padding: 0.7em 1em 0.8em;
      border-image: -gtk-gradient(radial,
                                  center bottom, 0,
                                  center bottom, 0.001,
                                  to($outline_track_color),
                                  to(transparent))
                                  0 0 0 / 0 0 0px;
      background-color: transparent;
      color: $secondary_fg_color;
      &:hover {
        @extend %button_flat_hover;
        border-image: none;
        background-color: transparent;
        color: $fg_color;
      }
      &:checked {
        @extend %button_flat_checked;
        border-image: -gtk-gradient(radial,
                                    center bottom, 0,
                                    center bottom, 0.5,
                                    to($selected_bg_color),
                                    to(transparent))
                                    0 0 2 / 0 0 2px;
        background-color: transparent;
        color: $fg_color;
        &:insensitive {
          @extend %button_flat_checked_insensitive;
          border-image: none;
          background-color: transparent;
          color: $insensitive_fg_color;
        }
      }
      &:insensitive {
        @extend %button_flat_insensitive;
        border-image: none;
        background-color: transparent;
        color: $insensitive_secondary_fg_color;
      }
    }

    > .toolbar .separator.vertical { // remove separator
      -GtkWidget-separator-width: 0;
      border: 0 none transparent;
      color: transparent;
    }
  }
}


// /***************************
//  * Cinnamon-control-center *
//  ***************************/

CcShellCategoryView { // stop using $base_color
  CcShellItemView.view { background-color: transparent; }
}

.cs-header {
  background-color: $secondary_dark_color;
  box-shadow: if($variant == 'light', $inline-shadow-light,
                                      $inline-shadow-dark);
}

// /************
//  * Synaptic *
//  ************/

GtkWindow > GtkBox.vertical > GtkBox.horizontal {
  > .toolbar {
    background-color: transparent;
    box-shadow: none;

    GtkToolItem > GtkBox {
      .label,
      .entry {
        padding-top: 0.1em;
        padding-bottom: 0.1em;
        font-size: 90%;
      }

      > .label { color: $insensitive_fg_color; }
    }
  }

  > GtkAlignment { background-color: transparent; }
}


// /**********************
//  * Eclipse/SWT (neon) *
//  **********************/

.background:not(.csd) > GtkBox.vertical {
  > .menubar { // force setting foreground colour
    color: $inverted_secondary_fg_color;
  }

  > GtkScrolledWindow .toolbar { // remove inline-shadows
    box-shadow: none;
  }
}


// /***********
//  * Synapse *
//  ***********/

.background:not(.csd):not(.ssd):not(.solid-csd) > GtkBox.vertical {
  > SynapseGuiSelectionContainer SynapseGuiMatchListView,
  > SynapseGuiSpecificMatchList GtkWidget {
    &:selected { // selected-row?
      color: $selected_fg_color;
      background-color: $selected_bg_color;
    }
  }
}

